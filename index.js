const { VK } = require('vk-io')
const fs = require('fs')

const settings = require('./data/settings.json')
const memes = require('./data/memes.json')
const users = require('./data/users.json')
const stats = require('./data/stats.json')

const { Answers, goQuestion, memeButton, voteKeyboard, statsButton } = require('./data/keyboards')

const token = settings.vkToken

const memesInput = './data/memes' // –ü–∞–ø–∫–∞ —Å –º–µ–º–∞–º–∏ 

const vk = new VK({
    token
})

// –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

const questions = [
    '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–ª—å–∑—É—é—Ç—Å—è –±–æ–ª–µ–µ 50 –º–ª–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –¥–µ–Ω—å',
    '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏–∑ –†–æ—Å—Å–∏–∏',
    '–í –ü–æ–¥–¥–µ—Ä–∂–∫–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–Ω–µ–µ 1000 —á–µ–ª–æ–≤–µ–∫',
    '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¢–û–ü-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –†–§',
    '–î–æ–º–µ–Ω vk.com –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ 2012 –≥–æ–¥—É',
    '–ë–æ–ª–µ–µ 70% –∂–∏—Ç–µ–ª–µ–π –†–æ—Å—Å–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞—Ö–æ–¥—è—Ç –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
    '–°—É–±–±–æ—Ç–∞ - –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–∞',
    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—â–µ –∑–∞—Ö–æ–¥—è—Ç –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'
]

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ –ø–æ—Ä—è–¥–∫—É

const correctAnswers = [
    true,
    true,
    false,
    true,
    false,
    true,
    false,
    true
]

function sendReplyToAnswer(type, value, context) {
    const nextQuestion = questions[value+1]

    context.reply(`${type ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '–ù–µ –≤–µ—Ä–Ω–æ!'}\n\n${value < questions.length - 1 ? `–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n${nextQuestion}` : '–ù–∞ —ç—Ç–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–º—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ú–µ–º"' }`,{
        keyboard: value < questions.length - 1 ? Answers(value+1) : memeButton
    })
}

function saveMemesBase() {
    fs.writeFileSync('./data/memes.json', JSON.stringify(memes, null, "\t"))
}

function saveUsersBase() {
    fs.writeFileSync('./data/users.json', JSON.stringify(users, null, "\t"))
}

function saveStatsBase() {
    fs.writeFileSync('./data/stats.json', JSON.stringify(stats, null, "\t"))
}

function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
 
fs.readdir(memesInput, (error, files) => {
    if(error) console.log(error)
    files.forEach(file => {
        const name = file.split('.')[0]

        if(!memes[name]) {
            memes[name] = {
                "like": [],
                "dislike": [],
                "url": null
            }
        }

    })
    saveMemesBase()
})

vk.updates.on('message_new', async (context) => {

    const user = context.senderId
    const payload = context.messagePayload?.command
    const action = payload?.split('-')
    const attachments = context?.attachments

    if(!users[user]) {
        users[user] = {
            "liked": 0,
            "disliked": 0,
            "views": 0
        }
    }
    
    saveUsersBase()

    if(attachments.length > 0) {
        if(attachments.length > 4) {
            return context.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 4-—Ö –º–µ–º–æ–≤ –∑–∞ —Ä–∞–∑!')
        }
        attachments.forEach(object => {
            const url = object.largeSizeUrl
            const name = url
                .split('/')[5]
                .split('.jpg')[0]
                .replace(/[^a-zA-Z0-9]+/g, '')

            if(!memes[name]) {
                memes[name] = {
                    "like": [],
                    "dislike": [],
                    "url": url
                }
            }

        })
        saveMemesBase()
        return context.reply(`üòÅ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–º–æ–≤: ${attachments.length}\n–°–ø–∞—Å–∏–±–æ!`)
    }

    const text = context.text.toLowerCase()

    if(text == '–ø—Ä–∏–≤–µ—Ç' || text == '–Ω–∞—á–∞—Ç—å') {
        context.reply('üëã –ü—Ä–∏–≤–µ—Ç –í–µ–∑–¥–µ–∫–æ–¥–µ—Ä–∞–º', {
            keyboard: goQuestion
        })
    }

    if(text == '–º–µ–º') {
        let memesList = []

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        Object.entries(memes).forEach(object => {
            if(object[1].like.includes(user) || object[1].dislike.includes(user)) return;
            memesList.push(object[0])
        })

        if(memesList.length == 0) return context.reply('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–º—ã!')

        const meme = memesList[getRandomNumber(0,memesList.length)]

        users[user].views++

        let url = memes[meme]?.url
        let path = ''

        if(url) {
            path = url
        } else {
            path = `./data/memes/${meme}.png`
        }

        context.sendPhotos({
            value: path
        }, {
            message: '–û—Ü–µ–Ω–∏—Ç–µ –º–µ–º –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!',
            keyboard: voteKeyboard(meme)
        })

        saveUsersBase()
    }

    if(payload) {
        if(payload == 'questions') {
            context.reply(`–ù–∞—á–Ω—ë–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n\n${questions[0]}`,{
                keyboard: Answers(0)
            })
        }
        if(action[0] == 'yes') {
            const question = Number(action[1])

            if(correctAnswers[question]) {
                sendReplyToAnswer(true, question, context)
            } else {
                sendReplyToAnswer(false, question, context)
            }
        }
        if(action[0] == 'no') {
            const question = Number(action[1])

            if(!correctAnswers[question]) {
                sendReplyToAnswer(true, question, context)
            } else {
                sendReplyToAnswer(false, question, context)
            }
        }

        if(['like', 'dislike'].includes(action[0])) {

            const meme = action[1]
            const move = action[0]

            if(memes[meme].like.includes(user) || memes[meme].dislike.includes(user)) return context.reply('–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –º–µ–º!')

            memes[meme][move].push(user)
            context.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${move} —ç—Ç–æ–º—É –º–µ–º—É!`,{
                keyboard: statsButton
            })

            const userAction = `${move}d` // like = liked; dislike = disliked hahahhahahah
            users[user][userAction]++
            stats[userAction]++

            saveMemesBase()
            saveUsersBase()
            saveStatsBase()
        }

        if(action[0] == 'getStats') {
            const userData = users[user]

            context.reply(`–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüëçüèª | –õ–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${userData.liked}\nüëéüèª | –î–∏–∑–ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${userData.disliked}\n\nüëÅ | –ú–µ–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${userData.views}\n\n–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: ${stats.liked}\n–í—Å–µ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤: ${stats.disliked}\n\nüèÜ –†–µ–π—Ç–∏–Ω–≥ –º–µ–º–æ–≤ –ø–æ –ª–∞–π–∫–∞–º:\n(–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)`)

            const ratingItems = Object.keys(memes).sort((x, y) => memes[x].like.length - memes[y].like.length).reverse().slice(0,9)

            let rating = []
            let ratingText = ''
            ratingItems.forEach((object, index) => {

                let url = memes[object]?.url
                let path = ''

                if(url) {
                    path = url
                } else {
                    path = `./data/memes/${object}.png`
                }

                rating.push({ value: path })
                ratingText += `${index+1} –º–µ—Å—Ç–æ | –õ–∞–π–∫–æ–≤: ${memes[object].like.length}\n`
            })
            context.sendPhotos(rating, {
                message: ratingText,
            })

        }
    }

})

vk.updates.start().then(console.log('INFO | –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))